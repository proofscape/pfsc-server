{# -------------------------------------------------------------------------- #
#   Copyright (c) 2011-2024 Proofscape Contributors                           #
#                                                                             #
#   Licensed under the Apache License, Version 2.0 (the "License");           #
#   you may not use this file except in compliance with the License.          #
#   You may obtain a copy of the License at                                   #
#                                                                             #
#       http://www.apache.org/licenses/LICENSE-2.0                            #
#                                                                             #
#   Unless required by applicable law or agreed to in writing, software       #
#   distributed under the License is distributed on an "AS IS" BASIS,         #
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #
#   See the License for the specific language governing permissions and       #
#   limitations under the License.                                            #
# -------------------------------------------------------------------------- #}
{% if redir_http %}
server {
    listen 80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}
{% endif %}

{% if twin_server_name %}
server {
    listen {{listen_on}}{{' ssl' if ssl else ''}};
    server_name {{twin_server_name}};

    # We use the "force revalidation" pattern
    #   https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#force_revalidation
    # so that readers always get the latest version of each page.
    # Nginx already serves `ETag` and `Last-Modified` headers by default, so we
    # just need to add the `Cache-Control: no-cache` header.
    add_header Cache-Control "no-cache";

    {% if ssl %}
    {% if hsts_seconds %}add_header Strict-Transport-Security "max-age={{hsts_seconds}};" always;{% endif %}
    ssl_certificate     /etc/nginx/ssl/cert;
    ssl_certificate_key /etc/nginx/ssl/key;
    {% endif %}

    {% if basic_auth_title %}
    auth_basic "{{basic_auth_title}}";
    auth_basic_user_file /etc/nginx/.htpasswd;
    {% endif %}

    root /usr/share/nginx/twin-site;

}
{% endif %}

server {
    listen {{listen_on}}{{' ssl' if ssl else ''}};
    server_name {{server_name}};

    {% if ssl %}
    {% if hsts_seconds %}add_header Strict-Transport-Security "max-age={{hsts_seconds}};" always;{% endif %}
    ssl_certificate     /etc/nginx/ssl/cert;
    ssl_certificate_key /etc/nginx/ssl/key;
    {% endif %}

    {% if basic_auth_title %}
    auth_basic "{{basic_auth_title}}";
    auth_basic_user_file /etc/nginx/.htpasswd;
    {% endif %}

    # Serve static files directly.
{% for path_ext, subdir in loc_map.items() %}
    location {{app_url_prefix}}/static{{path_ext}} {
        {% if static_redir %}
            return 302 $scheme://{{static_redir}}$request_uri;
        {% else %}
            {% if static_acao %}add_header Access-Control-Allow-Origin *;{% endif %}
            alias /usr/share/nginx{{subdir}};
        {% endif %}
    }
{% endfor %}

    # Ordinary requests:
    location {{root_url}} {
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Use the Docker nameserver in order to resolve the host name.
        {% if use_docker_ns %}resolver 127.0.0.11;{% endif %}
        proxy_pass http://{{pfsc_web_hostname}}:7372;
    }

    # Websockets:
    location {{app_url_prefix}}/socket.io {
        # Proxy params
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # WebSocket params
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        # Pass to the pfsc server
        {% if use_docker_ns %}resolver 127.0.0.11;{% endif %}
        proxy_pass http://{{pfsc_web_hostname}}:7372;
    }
}
